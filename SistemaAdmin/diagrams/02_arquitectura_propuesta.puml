@startuml Arquitectura_Propuesta_SIGE
!theme plain
title Sistema Integral de Gestión Educativa - Arquitectura Propuesta (Post-Refactoring)

package "Capa de Presentación (Controllers)" {
    class "LoginController" as LoginCtrl
    class "DashboardController" as DashboardCtrl
    class "EstudiantesController" as EstudiantesCtrl
    class "ProfesoresController" as ProfesoresCtrl
    class "NotasController" as NotasCtrl
    class "LlamadosController" as LlamadosCtrl
    class "HorariosController" as HorariosCtrl
}

package "Capa de Servicios (Lógica de Negocio)" {
    interface "IServicioEstudiantes" as IServEst
    interface "IServicioNotas" as IServNotas
    interface "IServicioProfesores" as IServProf
    interface "IServicioLlamados" as IServLlamados
    
    class "ServicioEstudiantes" as ServEst
    class "ServicioNotas" as ServNotas
    class "ServicioProfesores" as ServProf
    class "ServicioLlamados" as ServLlamados
    class "ServicioAutenticacion" as ServAuth
}

package "Capa de Modelos (TDCs)" {
    class "Estudiante" as Estudiante {
        -id: int
        -nombre: string
        -apellido: string
        -dni: string
        -fechaNacimiento: DateTime
        +getNombreCompleto(): string
        +esActivo(): bool
    }
    
    class "Profesor" as Profesor {
        -id: int
        -nombre: string
        -apellido: string
        -especialidad: string
        +getNombreCompleto(): string
    }
    
    class "Nota" as Nota {
        -valor: float
        -bimestre: string
        -fecha: DateTime
        +getValor(): float
        +esAprobada(): bool
    }
    
    class "LlamadoAtencion" as Llamado {
        -id: int
        -motivo: string
        -fecha: DateTime
        -sancion: string
    }
}

package "Capa de Persistencia (Mappers)" {
    interface "IEstudianteMapper" as IEstMapper
    interface "IProfesorMapper" as IProfMapper
    interface "INotaMapper" as INotaMapper
    
    class "EstudianteMapper" as EstMapper
    class "ProfesorMapper" as ProfMapper
    class "NotaMapper" as NotaMapper
    class "LlamadoMapper" as LlamadoMapper
}

package "Capa de Datos" {
    class "Database" as Database {
        +getInstance(): Database
        +query(sql: string, params: array): PDOStatement
        +fetch(sql: string, params: array): array
        +fetchAll(sql: string, params: array): array
    }
    
    entity "MySQL" as MySQL {
        entity "estudiantes" as TEstudiantes
        entity "profesores" as TProfesores
        entity "notas" as TNotas
        entity "llamados_atencion" as TLlamados
    }
}

' Conexiones propuestas (bajo acoplamiento)
LoginCtrl --> ServAuth
DashboardCtrl --> ServEst
DashboardCtrl --> ServNotas
EstudiantesCtrl --> IServEst
ProfesoresCtrl --> IServProf
NotasCtrl --> IServNotas
LlamadosCtrl --> IServLlamados

IServEst <|.. ServEst
IServNotas <|.. ServNotas
IServProf <|.. ServProf
IServLlamados <|.. ServLlamados

ServEst --> Estudiante
ServNotas --> Nota
ServProf --> Profesor
ServLlamados --> Llamado

ServEst --> IEstMapper
ServNotas --> INotaMapper
ServProf --> IProfMapper
ServLlamados --> LlamadoMapper

IEstMapper <|.. EstMapper
INotaMapper <|.. NotaMapper
IProfMapper <|.. ProfMapper

EstMapper --> Database
NotaMapper --> Database
ProfMapper --> Database
LlamadoMapper --> Database

Database --> TEstudiantes
Database --> TProfesores
Database --> TNotas
Database --> TLlamados

' Beneficios de la nueva arquitectura
note right of EstudiantesCtrl : "Solo maneja HTTP\nLógica delegada a servicios"
note right of ServEst : "Lógica de negocio\ncentralizada y testeable"
note right of Estudiante : "TDC robusto con\nvalidaciones internas"
note right of EstMapper : "Abstracción de persistencia\nFácil cambio de BD"

@enduml
